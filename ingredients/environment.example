#!/usr/bin/env bash

# Update the variables to match your environment
CAS_ENDPOINT="https://<vra-fqdn>"
CAS_USERNAME="<vra-username>"
CAS_PASSWORD="<vra-password"
CAS_API_TOKEN="<vrac-api-token>"

#    ***************************************************************************
#    ********************        Retrieve API Token         ********************
#    ***************************************************************************

# Create generic request
curl --noproxy '*' \
--silent \
--insecure \
--request POST \
--header 'Content-Type: application/json' \
--data '{
"username": "'"$CAS_USERNAME"'",
"password": "'"$CAS_PASSWORD"'"
}' \
"${CAS_ENDPOINT}/csp/gateway/am/api/login?access_token" \
--output site.output \
--write-out %{http_code} \
  > http.response.code 2> error.messages

# Capture exit code from curl
errorLevel=$?

# Based on HTTP Return code, do required action
if [[ "$(cat http.response.code)" = 200 ]] ; then
    # HTTP 200 - OK  Extract the access token from output and cleanup
    ACCESS_TOKEN=$(jq -r .access_token site.output)
    export CAS_ENDPOINT && echo "CAS API Endpoint exported successfully"
    export ACCESS_TOKEN && echo "Access Token exported sucessfully"
    rm -r site.output http.response.code error.messages
elif [[ "$(cat http.response.code)" = 000 ]] ; then
    # HTTP 000 - No code was received, therefore curl exit status is displayed
    echo "Error: Curl error code $errorLevel"
    rm -r http.response.code error.messages
else
    # HTTP Other response, print response and output, do not clean
    echo "Error: HTTP Status code $(cat http.response.code)"
    jq -r . site.output
fi